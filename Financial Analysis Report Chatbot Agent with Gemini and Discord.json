{
  "name": "Financial Analysis Report Chatbot Agent with Gemini and Discord",
  "nodes": [
    {
      "parameters": {
        "content": "# How it works!\n\nTrigger: \nRun manually, on schedule (Cron), or via webhook with query/body params.\n\nBuild Prompt & Variables: Set the ticker(s), timeframe, question, risk profile, and output style.\n\nGemini Analysis: Send a structured prompt to Gemini 1.5 Pro (or Flash) and get a focused financial narrative or JSON result.\n\nFormat Discord Message: Convert the AI response to a Discord-friendly message (headlines, bullets, code blocks or JSON).\n\nPost to Discord Webhook: Send the final report to your selected channel.\n\n\n\n# Setup instructions\n\n## Prerequisites\n\nAn n8n instance with internet access\n\nA Google AI (Gemini) API key\n\nA Discord server where you can create a webhook\n\nDiscord webhook\n\nIn Discord, go to Server Settings > Integrations > Webhooks.\n\nCreate a new webhook, pick the target channel, and copy the webhook URL.\n\nStore the URL as an n8n credential or environment variable (e.g., DISCORD_WEBHOOK_URL).\n\nGemini configuration\n\nCreate or obtain a Gemini API key from your Google AI account.\n\nChoose a model (e.g., gemini-1.5-pro for best reasoning; gemini-1.5-flash for speed).\n\nIn the Gemini Analysis node, reference the API key and model via variables (e.g., GEMINI_API_KEY, GEMINI_MODEL).\n\nUse structured prompts and optionally ask Gemini to return JSON for easier downstream formatting.\n\nTest run\n\nSet example values (ticker: AAPL, timeframe: 6M, question: ‚ÄúKey drivers and risks?‚Äù).\n\nExecute the workflow and confirm a formatted message is posted to your Discord channel.\n",
        "height": 908,
        "width": 552
      },
      "id": "779e852e-a0b5-4cb7-b385-f9ac277f07a5",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Introduction Note",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Aditya Vadaganadam",
      "position": [
        -672,
        224
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Aditya Vadaganadam"
    },
    {
      "parameters": {
        "content": "### Chat Trigger\n- Click üó® Open chat to start\n- Flow: Chat ‚Üí Agent ‚Üí Discord\n- Activate the workflow to share a public chat URL\n",
        "height": 252,
        "width": 300,
        "color": 7
      },
      "id": "cd66718e-e76a-4bc4-9d4b-70f2aba4f0c3",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        848,
        336
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "### Agent Instructions \nYour AI agent can:\n1. Receive chat questions (tickers, sectors, timeframe, thesis)\n2. Analyze with Gemini (drivers, risks, valuation/metrics, next steps)\n3. Post a formatted report to Discord via webhook\n\nCustomize:\n- Open the **agent1** node and edit the **System Message** (tone, depth, risk profile)\n- Pick model in **Connect Gemini** (e.g., gemini‚Äë2.5‚Äëflash‚Äëlite; adjust temperature/tokens)\n- Ask for Markdown sections: Summary, Drivers, Risks, Metrics, Next Steps, Takeaway\n- Optionally fetch market/news/filings data before the agent and include it as context",
        "height": 476,
        "width": 396,
        "color": 7
      },
      "id": "f6cf061b-c11e-49d7-a8fc-e6752e98e14a",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1232,
        112
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! üëã",
        "options": {
          "inputPlaceholder": "Type your message here...",
          "showWelcomeScreen": false,
          "subtitle": "This is for demo purposes. Try me out !",
          "title": "Your first AI Agent üöÄ",
          "responseMode": "lastNode"
        }
      },
      "id": "a524c281-bb72-45e9-912e-89e0f0946031",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Example Chat",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "creator": "Lucas Peyrin",
      "position": [
        944,
        432
      ],
      "webhookId": "c4469360-faae-415c-86e2-58c6877acd85",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "contextWindowLength": 30
      },
      "id": "0cf8cad8-a2d6-4ff2-aafd-70875e2c127a",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Conversation Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "creator": "Lucas Peyrin",
      "position": [
        1344,
        720
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "maxOutputTokens": 2048,
          "temperature": 0
        }
      },
      "id": "a1d663d0-bc10-4a1a-8807-e7f89453d386",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Connect Gemini",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "creator": "Lucas Peyrin",
      "position": [
        944,
        720
      ],
      "typeVersion": 1,
      "notesInFlow": true,
      "credentials": {
        "googlePalmApi": {
          "id": "iHcmOfLEX7ID1xMU",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      },
      "notes": "adihere"
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n1. [In Google AI Studio](https://aistudio.google.com/app/apikey) click **‚ÄúCreate API key in new project‚Äù** and copy it.\n\n2. Open the ```Connect Gemini``` node:\n   * **Select Credential ‚Üí Create New**\n   * Paste into **API Key** and **Save**\n",
        "height": 316,
        "width": 294,
        "color": 3
      },
      "id": "e393c50c-c09e-4687-a5b1-db1fcd3e0c81",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        848,
        672
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=Welcome to your AI powered financial analyst - {{ $json.$workflow.name }}\n\nYou asked -  {{ $('Example Chat').item.json.chatInput }}\n\nExecutive Summary - {{ $('agent1').item.json.output.idea }}\n\nA bit more of details {{ $json.clean }}\n\nDisclaimer:\nThis application uses generative artificial intelligence (AI) to provide financial insights and analyses. The content generated is for informational purposes only and should not be considered as professional financial advice or a recommendation to buy or sell any securities. Users are strongly encouraged to conduct their own independent research and consult with qualified financial advisors before making any investment decisions.\n\nThe information provided by this AI-powered tool is experimental and may contain errors, inaccuracies, or outdated information. We expressly disclaim any liability for losses or damages resulting from reliance on the content generated by this application. Use at your own risk.",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2320,
        416
      ],
      "id": "6d633d90-6de1-4abd-b61f-acd1747f82f5",
      "name": "Discord",
      "webhookId": "f5222651-b196-428e-86c9-7df56d46dfea",
      "notesInFlow": false,
      "credentials": {
        "discordWebhookApi": {
          "id": "Xnz9dVPJXoYm4TIZ",
          "name": "Discord Webhook account"
        }
      },
      "notes": "The message is via AI agent - DYOR"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=<context>\n### Input\nThe user's query is provided from the previous node:\n\"{{$json[\"query\"]}}\"\n\n### Instructions\n- Analyze the query strictly from a financial analysis perspective. \n- Provide structured insights (such as risks, revenue potential, cost implications, investment outlook, etc.).\n- Be conversational, sarcastic, and bitey, but still educational.\n- Keep the tone frank and truth-focused, not sugar-coated.  \n- Finish with a short but clear takeaway for the user.\n\n### Output\nGenerate the output in markdown format without any special characters  \n</context>"
        }
      },
      "id": "fdd3c5fe-c96e-48e3-9880-94204fd7c783",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "creator": "Lucas Peyrin",
      "position": [
        1312,
        432
      ],
      "typeVersion": 2.2,
      "executeOnce": false,
      "alwaysOutputData": false,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"idea\": \"One liner title or idea\",\n\t\"analysis\": \"Analysis of the title \"\n}",
        "autoFix": "="
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1584,
        656
      ],
      "id": "5329ee1f-839f-4f1b-b7f2-e82d1f337942",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "let str = $input.first().json.output.analysis\n\n// Remove all special characters except letters, numbers, and spaces\nstr = str.replace(/[^a-zA-Z0-9 ]/g, '');\n\nreturn [{ json: { clean: str } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        448
      ],
      "id": "1ad975d2-ae80-40e6-93c3-f37ef20cd885",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "955d43bb-46f9-4189-9124-6d22b83c1834",
              "name": "clean",
              "value": "={{ $json.clean }}",
              "type": "string"
            },
            {
              "id": "8b267b8c-76ba-48cc-96f3-01abcd1f15df",
              "name": "output.idea",
              "value": "={{ $('agent1').item.json.output.idea }}",
              "type": "string"
            },
            {
              "id": "c88a0009-7c7f-4ffa-b8c8-3c63937ece3b",
              "name": "chatInput",
              "value": "={{ $('Example Chat').item.json.chatInput }}",
              "type": "string"
            },
            {
              "id": "948d9bd5-d0dd-48af-871c-0258bfa33d03",
              "name": "$workflow.name",
              "value": "={{ $workflow.name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1984,
        528
      ],
      "id": "3b2b60fd-5051-4731-b652-31d73ac0b337",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "Get a webhook for a channel on Discord \n\nOfficial Discord Docs on creating and managing webhooks:\nhttps://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\n\nn8n Docs on Discord credentials including webhook setup:\nhttps://docs.n8n.io/integrations/builtin/credentials/discord/",
        "height": 400,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2288,
        560
      ],
      "typeVersion": 1,
      "id": "4dc108f0-6a49-4c02-9b99-bb3ece8f59a7",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Overview of research agent \n\nThis template lets you run on-demand or scheduled financial analyses using Google‚Äôs Gemini model and deliver clean, readable reports directly to a Discord channel via webhook. \n\nIt‚Äôs ideal for teams that want quick insights (e.g., price trends, ratios, risk flags, and narrative summaries) without leaving Discord. The workflow accepts tickers, timeframes, and questions, prompts Gemini to analyze the context you provide (and optionally data you fetch upstream), then formats a concise report and posts it to your chosen channel. \n\nIt is designed to be easily customizable: tweak the prompt, model, output format, and metrics with a few fields‚Äîno complex code required.",
        "height": 384,
        "width": 528
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -672,
        -240
      ],
      "id": "40b4259b-45ff-4d08-b6a6-715e1450a60c",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Customization\n\n## Prompt control: \nEdit the ‚ÄúAnalysis Instructions‚Äù field to change voice, depth, and focus (e.g., fundamentals vs. technicals). Add a disclaimer or compliance note.\n\n## Output type: \nAsk Gemini for JSON with specific keys (summary, metrics, risks, actions), then format for Discord.\n\n### Data enrichment: \nInsert an HTTP Request node before analysis to fetch market data (e.g., OHLC, ratios) and pass it into the prompt.\n\n## Model selection: \nSwap between gemini-1.5-pro and gemini-1.5-flash via a variable for cost/speed trade-offs.\n\n### Scheduling and routing: \n\nAdd a Cron node for daily summaries or route different tickers to different Discord channels.\n\n### Notes\nThis workflow does not provide financial advice; verify outputs and consider adding a standardized disclaimer.\n\nIf you expect large inputs (tables, transcripts), use the 1.5 models and keep prompts concise.\n\n### Suggested fields and variables\n\nInputs: ticker, timeframe, question, risk_profile, output_format (markdown|json), channel_override\n\nSecrets: GEMINI_API_KEY, DISCORD_WEBHOOK_URL\n\nOptions: GEMINI_MODEL (default: gemini-1.5-pro), max_tokens, temperature\n\n\n### Example prompt scaffold (place in Build Prompt & Variables or the Code node)\n\n### System: \n‚ÄúYou are a financial analyst. Be concise, evidence-based, and include clear caveats.‚Äù\n\n### User context:\n\nTicker: {{ticker}}, Timeframe: {{timeframe}}\n\nQuestion: {{question}}\n\nIf data is provided, include ‚ÄúAttached data:‚Äù and summarize what to use.\n\n## Output format:\n\nMarkdown with sections: Summary, Drivers, Risks, Metrics, Next Steps\n\nOr JSON with keys: summary, drivers[], risks[], metrics{‚Ä¶}, actions[]",
        "height": 1360,
        "width": 672
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -64,
        -320
      ],
      "id": "01448704-9c52-4684-878c-67b41d27bf08",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "### Conversation Memory ‚Äî keep analyses on topic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Maintains a sliding window of recent messages (default: 30) to give Gemini context\n- Improves coherence of financial analyses and the Discord report\n- Tune in the ‚ÄúConversation Memory‚Äù node (contextWindowLength) to balance context vs. cost\n- Memory resets per chat session; clear manually when testing if needed\n",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "4ea4fa42-cda6-45cd-a158-c9e00ffbdbf5",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1232,
        624
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Structured Output Parser \n\nEnforce JSON for Discord report\n- Validates Gemini‚Äôs response against a schema so downstream formatting stays predictable\n- Default keys: `idea` (one‚Äëline thesis) and `analysis` (Markdown sections)\n- Enable ‚ÄúAuto‚Äëfix‚Äù to repair minor JSON issues; otherwise the agent may retry\n- If you add fields (e.g., `drivers[]`, `risks[]`, `metrics{}`), update the schema and the formatting node\n\nExample schema\n{\n  \"idea\": \"One‚Äëline thesis\",\n  \"analysis\": \"Markdown sections: Summary, Drivers, Risks, Metrics, Next Steps, Takeaway\"\n}\n\nTip: If outputs drift from the schema, tighten the agent‚Äôs System Message and/or lower temperature.",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "6e895d59-ad8f-4fcf-8db2-bd048ca35e58",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1520,
        624
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "### Format Discord Message ‚Äî final report\n- Purpose: Turn `output.idea` + `output.analysis` into a Discord‚Äëready Markdown report.\n- Inputs: `output.idea`, `output.analysis`, chat question, `$workflow.name`.\n- Customize: headings, sections/emojis, disclaimer, timestamps.\n- Discord limit: ~2000 chars/message ‚Äî split long content if needed.\n- Fallbacks: default idea (‚ÄúSummary‚Äù), empty analysis if missing; lightly sanitize non‚ÄëMarkdown.\n",
        "height": 468,
        "width": 308,
        "color": 7
      },
      "id": "613964aa-5378-4061-a5fa-3f8ab65c0990",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1664,
        112
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n### Edit Fields ‚Äî map data to Discord\n- Purpose: Select/rename fields for the Discord node.\n- Input: `clean` (Markdown report) from the Code node.\n- Output: `clean` (and any extra fields you add).\n- Customize: add `idea`, `chatInput`, `ticker`, `timeframe`, defaults, or computed values.\n- Tip: Keep field names consistent with the Discord message template.",
        "height": 436,
        "width": 260,
        "color": 7
      },
      "id": "1bfd73d2-1c78-48b4-9f69-55db0e079e58",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1920,
        624
      ],
      "typeVersion": 1,
      "notes": "¬© 2025 Lucas Peyrin"
    }
  ],
  "pinData": {},
  "connections": {
    "Example Chat": {
      "main": [
        [
          {
            "node": "agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Connect Gemini": {
      "ai_languageModel": [
        [
          {
            "node": "agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "agent1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6ffd90e1-754d-482b-8af9-c9acb78491df",
  "meta": {
    "templateId": "6270",
    "templateCredsSetupCompleted": true,
    "instanceId": "dc6502f6723706f89d6fafb74f8b1c9e62669bc4f6e7235a97b3670f95fa0dfd"
  },
  "id": "MeoXTIa3v9fjyJEy",
  "tags": [
    {
      "createdAt": "2025-08-24T21:42:42.394Z",
      "updatedAt": "2025-08-24T21:42:42.394Z",
      "id": "7P7402AT8fl1UgKy",
      "name": "discord"
    },
    {
      "createdAt": "2025-08-24T21:42:35.574Z",
      "updatedAt": "2025-08-24T21:42:35.574Z",
      "id": "TiwQjTi7BRE6rBjx",
      "name": "gemini"
    },
    {
      "createdAt": "2025-08-24T21:42:51.754Z",
      "updatedAt": "2025-08-24T21:42:51.754Z",
      "id": "YXKQkUYk2OAFiNjz",
      "name": "agent"
    },
    {
      "createdAt": "2025-08-24T21:42:48.732Z",
      "updatedAt": "2025-08-24T21:42:48.732Z",
      "id": "izuNj2v182Li85ja",
      "name": "financial"
    },
    {
      "createdAt": "2025-08-24T21:42:39.803Z",
      "updatedAt": "2025-08-24T21:42:39.803Z",
      "id": "luHmOkpwxgGHf47m",
      "name": "ai"
    }
  ]
}
